#search and insert in unsorted array               
def searchEle(a, x):
    # Code here
    for i in a:
        if i == x:
            return True
            
    return False
    
# fucntion must return true if 
# insertion is successful or else
# return false
def insertEle(a, y, yi):
    # Code here
    if yi == 0:
        a = [y] + a
        return True
    elif yi == len(a):
        a = a + [y]
        return True
    else:
        if yi > 0 and yi < len(a):
                a = a[0:yi] + [y] + a[yi:]
                return True
    return False

# fucntion must return true if 
# deletion is successful or else
# return false
def deleteEle(a, z):
    # Code here
    if z not in a:
        return True
    else:
        for i in range(0, len(a)-1):
            if a[i] == z:
                a[i:] = a[i+1:]
        return True
    return False



#search and insert in sorted array
# insertion
l = [-1, 1, 2, 4, 7, 9]
k = 12

l1 = []
if k < l[0]:
    print ([k] + l)
    
elif k > l[-1]:
    print (l + [k])
    
elif k > l[0] and k  < l[-1]:
       for i in range(len(l)):
           if l[i] < k and l[i+1] > k:
               l = l[0:i+1] + [k] + l [i+1:]
            
       print(l)  
       
 
 # deletion in sorted array
l = [-1, 1, 2, 4, 7, 9]
k = 7

l1 = []
if k == l[0]:
    print (l[1:])
    
elif k == l[-1]:
    print (l[0:-1])
    
elif k > l[0] and k  < l[-1]:
      for i in range(0,len(l)):
            if l[i] == k:
                l1 = l[0:i] + l[i+1:]
                       
                print(l1)


'''Find the element that appears once in an array 
where every other element appears twice'''
l = [0, -1,-1, 1, 1, 2,2]
l1 = []
for i in l:
    if l.count(i) == 1:
         l1.append(i)
print(l1)    
        
'''Find the only repetitive element between 1 to n-1'''
l = [1, 3, 2, 4, 1]
l1 = []
j = 0
for i in l:
    if l.count(i) > 1:
        l1.append(i)

print(set(l1))


'''Find the only repetitive element between 1 to n-1'''

l = [1, 3, 2, 3, 4]
l1 = []
j = 0

def abc(l):
    j = 0
    for i in range(len(l)):
        for j in range(i + 1, len(l)):        
            if l[i] == l[j]:
             return l[i]
         
    return False
        
print(abc(l))

'''Given an array A[] and a number x, 
check for pair in A[] with sum as x (aka Two Sum)'''
l = [1, 3, 2, 3, 4, 6, 7, 8, 9]
l1 = sorted(l)
l2, l3 = [],  []
x = -1
for i in range(len(l1)):
    for j in range(len(l1)):
        if i != j:
           if l1[i] + l1[j] == x and l1[i] <= l1[j]:
                l2.append ([l1[i], l1[j]])
                
if l2 == []:
    print("no such pair exists")            

for  i in l2:
    if l2.count(i) > 1:
        l2.remove(i) # first instance of duplicate element is removed from list
if l2 :
    print(l2)


'''Find a triplet that sum to a given value'''
l = [12, 3, 4, 1, 6, 9, 13, 14, 15, 16, 17, 18, 19, 20]
s = len(l)
sums = 24
l1, l2 = [], []

for i in range(s):
    for j in range(i+1, s):
        for k in range(i+2, s):
            if l[i] + l[j] + l[k] == sums and (l[i]!=l[j] != l[k]):
                l1.append([l[i], l[j], l[k]])
                
#print(l1)
#print()

if l1:
    for i in l1:
            l2.append((sorted(i)))
            
    for i in l2:
        if l2.count(i) > 1:
             l2.remove(i)           
    
    
    #print(l2)
                    
    for i in l2:
            for j in i:
                print(','.join([str(j) for j in i]))
                break
elif l1 == []:
    print("no such triplet exists")
    
    
'''Write a function which takes an array and 
prints the majority element (if it exists), 
otherwise prints “No Majority Element”. 
A majority element in an array A[] of size n 
is an element that appears more than n/2 times 
(and hence there is at most one such element). '''


l = [3, 3, 4, 2, 4, 4, 2, 4]
l1 = []
def majority(l):
    size = len(l)
    comp = size // 2
    for i in l:
        if l.count(i) > comp:
            return i
    
    return ("no such element exists")

print(majority(l))  # check hash logic too

'''find equil index - Equilibrium index of an array is an index such that
 the sum of elements at lower indexes is equal to the sum of elements at 
 higher indexes. '''


l = [-1, 2, 3]
l1 = []
def equilindex(l):
    for i in range(len(l)):
        a = l[0:i]
        b = l[i+1:]
        if sum(a) == sum (b):
            return i
            break
    
    return -1

print(equilindex(l))

'''find equil index - Equilibrium index of an array is an index such that
 the sum of elements at lower indexes is equal to the sum of elements at 
 higher indexes. '''


l = [1, 2, 8, 10, 10, 12, 19]
l1 = []
def floorceiling(l):
        x = 8
        if x > l[-1]:
            print("floor = ",  l[-1], "ceil doesn't exist in array, ")
            
        elif x < l[0]:
            print("floor doesn't exist in array", "ceil = ", l[0])
        else:
            l.append(x)
            l.sort()
            #print(l) 
            a = l[0:l.index(x)]
            b = l[l.index(x)+1:]
            #print(a)
            #print(b)
            if a and b:
                   floor = a[-1]
                   ceiling = b[0]
                   print("floor = ", floor, "ceil = ", ceiling)
          
floorceiling(l)
