'''Given an array of integers, print the array in such a way that the 
first element is first maximum and second element is first minimum and so on'''

l = [1, 6, 9, 4, 3, 7, 8, 2]

l1 = []
l.sort()

print(l)


while (len(l) >= 0):
    for j in range(len(l)-1, 0, -1):
            print(l[j], end = " ")
            del(l[j])
            #print(l)
            break
    for i in range(len(l)):
            print(l[i], end = " ")
            
            del(l[i])
            #print(l)
            break

'''Given an array of integers, print the array in such a way that the 
first element is first maximum and second element is first minimum and so on'''

l = [10, 5, 6, 3, 2, 20, 100, 80]

l1 = []
l.sort()

print(l)

for i in range(0, len(l)-1, 2):   
    temp = l[i+1]
    
    l[i+1] = l[i]
    
    l[i] = temp
     
print("final list in wave form", l)


'''Given an array of n distinct elements and a number x, 
arrange array elements according to the absolute difference with x, 
i. e., an element having minimum difference comes first, and so on. 
Note: If two or more elements are at equal distance 
arrange them in the same sequence as in the given array.'''

#Output : = {5, 9, 10, 3, 2}

key = [1, 2, 3, 4, 5]
x = 6
value = []
for i in key:
    value.append(abs(x - i))
print(value)

res = {key[i] : value[i] for i in range(len(key))}
print(res)

[print(key, end = " ") for (key, value) in sorted(res.items() , key=lambda x: x[1])]


'''Given an array, A of size N consisting of elements 1 to N. 
A boolean array B consisting of N-1 elements indicates that if B[i] is 1, 
then A[i] can be swapped with A[i+1]. 
Find out if A can be sorted by swapping elements.'''

#Output : A can be sorted

a = [2, 3, 1, 4, 5, 6]
b = [0, 1, 1, 1, 1]
#flag = 0

for i in range(len(a)-1):
    for j in range (len(b)-1):
        if b[j] == 1 and i == j:
            if a[i] > a[i+1]:
                a[i], a[i+1] = a[i+1], a[i]
            elif a[i] < a[i+1]:
                a[i], a[i+1] = a[i], a[i+1]
    
        elif b[j] == 0 and i == j:
            a[i], a[i+1] = a[i], a[i+1]
             
           
print(a)    


if a == sorted(a):
    print("list can be sorted")
    
else:
    print("list can not be sorted")
    
    '''Print the elements of an array in the decreasing frequency 
if 2 numbers have same frequency then print the one which came first. '''

# output - [8, 8, 8, 2, 2, 5, 5, 6]

l = [2, 5, 2, 8, 5, 6, 8, 8]
l1 = l.copy()
l2, l3, l4 = [], [], []

for i in l1:
    if i not in l3:
        l2.append((i, l1.count(i)))
        l3.append(i)
print(l2)

for i in l2:
    
        print(str(i[0])*i[1])
        

for i in l2:
    
        l4.append((str(i[0])*i[1]))

print(l4)


l4.sort(key = len)

l4.reverse()
print(l4)

for i in l4:
    print(int(i), end = ", ")



'''Print the elements of an array in the decreasing frequency 
if 2 numbers have same frequency then print the one which came first. '''

# output - [8, 8, 8, 2, 2, 5, 5, 6]

l = [2, 5, 2, 6, -1, 9999999, 5, 8, 8, 8]
l1 = l.copy()
l2, l3, l4 = [], [], []

l.sort()
print(l)

for i in l:
    l2.append([i, l.count(i)])
    
print(l2)

l2.sort(key = lambda l2: l2[1], reverse =  True)

print(l2)
for item in l2:
   l3.append(((item[0])))
print(l3)  # sorting according to original list if frequency is same not working


'''Count Inversions in an array | Set 1 (Using Merge Sort) '''


l = [3, 1, 2]

l1 = sorted(l)
count_inversions = 0
while (l != l1):
    for i in range(len(l)-1):
       if i < i + 1 and l[i] > l[i+1]:
           l[i], l[i+1] = l[i+1], l[i]
           count_inversions = count_inversions + 1
       
       
print(l)
print(count_inversions)

#Another method of above question - count how many numbers are larger than current number, that many ineversions are there
'''Count Inversions in an array | Set 1 (Using Merge Sort) '''


l = [8, 4, 2, 1]

count = 0
count_inversions = 0
for i in range(len(l)-1):
    for j in range(i+1, len(l)):
        if l[i] > l[j]:
            count = count + 1
       
       
print(l)
print(count)
