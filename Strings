'''change some letters to other in a string'''

str = "geeks"
  
str1 = "gks"
str2 = "abc"


# using maketrans() to map elements of str2 with str1
mapped = str.maketrans( str1, str2 )
  
# using translate() to translate using the mapping
print ("The string after translation using mapped elements is : ")
print  (str.translate(mapped) )

REGULAR EXPRESSIONS
''' output - ['elonmusk', 'teslarati', 'dummy_tesla', 'dummy_2_tesla']'''
import re

text = '''
Follow our leader Elon musk on twitter here: https://twitter.com/elonmusk, more information 
on Tesla's products can be found at https://www.tesla.com/. Also here are leading influencers 
for tesla related news,
https://twitter.com/teslarati
https://twitter.com/dummy_tesla
https://twitter.com/dummy_2_tesla
'''
pattern = 'twitter\.com/([a-z | 0-9 |_]*)'

matches = re.findall(pattern, text)
print(matches)

import re
text = '''
Tesla's gross cost of operating lease vehicles in FY2021 Q1 was $4.85 billion.
BMW's gross cost of operating vehicles in FY2021 S1 was $8 billion.
'''

pattern = 'FY(\d{4} [A-Z][0-9])'
matches = re.findall(pattern, text)
print(matches)


''''Count and display vowels in a string'''

s  = 'Geeks for Geeks'

from collections import defaultdict

c = 0
l1  = []
for i in s:
    if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':
        c = c + 1
        if (i, s.count(i)) not in l1:
            l1.append((i, s.count(i)))
            
        
print(l1)
print(c)

d = defaultdict(list)


for key, value in l1:
    d[key].append(value)

print(d)  

'''Check for URL in a String'''

string = '''My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles 
in the portal of https://www.geeksforgeeks.org/'''

import re

pattern = 'https:[^" "]*'

matches = re.findall(pattern, string)

print(matches)

'''Check if a Substring is Present in a Given String

Input : Substring = "geeks" 
           String="geeks for geeks"
           
output : yes
'''
string = "geeks for geeks"

import re

pattern = 'geeks'

matches = re.findall(pattern, string)

if matches:
    print("yes")
    
else:
    print("no")
    
'''Check if Two Strings are Anagram

An anagram of a string is another string that contains the same characters, 
only the order of characters can be different. 

Input : s1 = "listen"
        s2 = "silent"
Output : The strings are anagrams.

Input : s1 = "dad"
        s2 = "bad"
Output : The strings aren't anagrams.
'''

s1  = "listen"
s2  = "silent"

flag = True

for i in s1:
    if i not in s2:
        flag = False
        
for j in s2:
    if j not in s1:
        flag= False
        
if flag:
    print("is a  anagram")
else:
    print("not a anagram")

'''We are given a sentence of english language(can also contain digits), 
we need to compute and print the sum of ASCII values of characters of each word in that sentence.'''

s  = ' GeeksforGeeks, a computer science portal for geeks'

sums  = 0

l = []

l = list(s.split(" "))
#print(l)

l1  = []
for i in l:
    if i !=  "":
        l1.append(i)
    
print(l1)

for i in l1:
    for j in i:
        sums = sums  + ord(j)
    
print("sum of ascii code of words in list is : ", sums)

'''Given a name, print the initials of a name(uppercase) 
with last name(with first alphabet in uppercase) written in full separated by dots. 

Input : geeks for geeks
Output : G.F.Geeks'''

s1 = 'mohandas karamchand gandhi'

s = s1.title()

l1 = list(s.split(" "))

#print(l1)

l2 = []

l3 = l1[:-1]
#print(l3)

for i in l3:
    l2.append((i[0], "."))

   
#l2.append(l1[-1])
        
#print(l2)

l4  = []

for (i,j) in l2:
    l4.append(i + j)
    
#print(l4)

l5 = l4 + [l1[-1]]
#print(l5)

snew = ''
for i in l5:
    snew = snew + i
    
print(snew)

'''Find the k most frequent words from data set in Python

Input : "John is the son of John second. 
         Second son of John second is William second."
Output : [('second', 4), ('John', 3), ('son', 2), ('is', 2)]'''

s1 = '''John is the son of John second. Second son of John second is William second.'''

s1 = s1.upper()
s =  s1.replace(".", "")

print(s)
l1 = []

l = s.split()
for i in l:
    if (i, l.count(i)) not in l1:
        l1.append((i, l.count(i)))

print(l1)

OR
s = s.upper()

s1 = s.replace(".", " ")

from collections import Counter

l = s1.split()

print(l)
Counter = Counter(l)

most_occur = Counter.most_common(4)

print(most_occur)

We need to find all possible close good enough matches of input string 
into list of pattern strings.

Examples:

Input : patterns = ['ape', 'apple', 
                  'peach', 'puppy'], 
          input = 'appel'
Output : ['apple', 'ape']'''
BRUTE FORCE
l = ['ape', 'apple', 'peach', 'puppy']

c = 'appel'

counter = 0

import math

first_letter = c[0]

value = math.ceil(len(c) / 2)

for i in l:
    for j in i:
        if j in c:
            counter = counter + 1

l1 = []            

for i in l:
    for j in i:
        if i[0] == first_letter and counter >= value and i not in l1:
            l1.append(i)
            
print(l1)

OR

from difflib import get_close_matches
  
ans = get_close_matches(c, l)

print(ans)

'''Given K and a binary number, 
check if there exists k consecutive 1’s in the binary number.'''

l = '11100000'

k = 5

count  = 0

for i in range(len(l)-1):
    #for j in range(i + 1, len(l)):
        j = i + 1
        if l[i] == '1' and l[j] == '1':
            count = count + 1
        else:
            continue
            
ans = count + 1
print(ans)

if ans == k:
    print('yes')
else:
    print('no')
    
'''Two strings are given and you have to modify 1st string 
such that all the common characters of the 2nd string have 
to be removed and the uncommon characters of the 2nd string 
have to be concatenated with uncommon characters of the 1st string. 

Input : S1 = "aacdb"
        S2 = "gafd"
Output : "cbgf"

Input : S1 = "abcs";
        S2 = "cxzca";
Output : "bsxz" '''

s1 = "abcs"

s2 = "cxzca"

s3 = ''

for i in s1:
    if i not in s2 and i not in s3:
        s3 = s3 + i 
        
for i in s2:
    if i not in s1 and i not in s3:
        s3  = s3 + i
        
print(s3)


'''Given a string of lowercase characters only, 
the task is to check if it is possible to split a string 
from middle which will gives two halves having the same characters 
and same frequency of each character. If the length of the given 
string is ODD then ignore the middle element and check for the rest.

Input : abbaab
Output : NO

Input : abccab
Output : YES'''

flag = True

s1 = "abbaab"

s3 = ''

if len(s1) % 2 == 0:
    mid = len(s1)//2 - 1
    first_half = s1[0:mid + 1]
    second_half = s1[mid + 1:]
    

else:
    mid = len(s1)//2 -1
    first_half = s1[0:mid + 1]
    second_half = s1[mid + 2:]


#print(first_half)
#print(second_half)
        
for i in first_half:
    if i not in second_half:
        flag = False

for i in second_half:
    if i not in first_half:
        flag = False


for i in first_half:
    for j in second_half:
        if first_half.count(i) != second_half.count(i):
            flag = False

if flag:
    print('yes')
else:
    print('no')

'''Find the first repeated word in a string in Python using Dictionary

Input : "Ravi had been saying that he had been there"
Output : had '''

s = "he had had he"
l = s.split()

print(l)
flag = True
for i in l:
    if l.count(i) > 1:
        print(i)
        flag = True
        break
    else:
        flag = False
        
if flag == False:
    print("no repetitions")
    
    
'''Given a string and a number k, 
find the k-th non-repeating character in the string. 
Consider a large input string with lacs of characters 
and a small character set. How to find the character by only doing 
only one traversal of input string? Examples:

Input : str = geeksforgeeks, k = 3
Output : r'''

s = "geeksforgeeks"
k = 4
l1 = []

for i in s:
    if s.count(i) == 1:
        l1.append(i)

#print(l1)      

if k <= len(l1):
    print(l1[k-1])
else:
    print("Less than k non-repeating characters in input.")
    
'''Given a string, find all the duplicate characters which are similar to each other.

Input : hello
Output : l

Input : geeksforgeeeks
Output : e g k s
'''

s = 'hello'
l1  = ''

for i in s:
    if s.count(i) > 1 and i not in l1:
        l1 = l1 + i
        
print(l1)

OR

from collections import Counter
 
 
def find_dup_char(input):
 
    # now create dictionary using counter method
    # which will have strings as key and their
    # frequencies as value
    WC = Counter(input)
 
    # Finding no. of  occurrence of a character
    # and get the index of it.
    for letter, count in WC.items():
        if (count > 1):
            print(letter)
 
 
# Driver program
if __name__ == "__main__":
    input = 'geeksforgeeks'
    find_dup_char(input)
    
'''Given an alphanumeric string, extract maximum numeric value from that string. 
Alphabets will only be in lower case. Examples:

Input : 100klh564abc365bg
Output : 564
Maximum numeric value among 100, 564 
and 365 is 564.

Input : abchsd0sdhs
Output : 0

'''

import re

s = '100klh564abc365bg'

pattern = '\d[^a-zA-Z]*'

matches = re.findall(pattern, s)
print(max(matches))   

'''Two strings are said to be complete if on concatenation, 
they contain all the 26 English alphabets. 
For example, “abcdefghi” and “jklmnopqrstuvwxyz” are
complete as they together have all characters from ‘a’ to ‘z’.
We are given two sets of sizes n and m respectively 
and we need to find the number of pairs that are 
complete on concatenating each string from set 1 to each string from set 2.

Input : set1[] = {"abcdefgh", "geeksforgeeks",
                 "lmnopqrst", "abc"}
        set2[] = {"ijklmnopqrstuvwxyz", 
                 "abcdefghijklmnopqrstuvwxyz", 
                 "defghijklmnopqrstuvwxyz"} 
Output : 7
'''
l1  = []
s1 = {"abcdefgh", "geeksforgeeks", "lmnopqrst", "abc"}
s2 = {"ijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz", "defghijklmnopqrstuvwxyz"}
ch= 'abcdefghijklmnopqrstuvwxyz'
for i in s1:
    for j in s2:
        if ch in (i + j) and (i,j) not in l1:
            l1.append((i + j))

for i in l1:
    print(i)
    
    
'''Given a sentence containing n words/strings. 
Remove all duplicates words/strings which are similar to each others.

Input : Geeks for Geeks
Output : Geeks for

'''

s = 'Python is great and Java is also great'
l = s.split()
l1  = []

for i in l:
    if i not in l1:
        l1.append(i)
        
#print(l1)

for i in l1:
    print(i, end = " ")
    
 
 
 '''Given a sentence, sort it alphabetically in ascending order.

Input : to learn programming refer geeksforgeeks
Output : geeksforgeeks learn programming refer to
'''

s = 'to learn programming refer geeksforgeeks'

l = s.split()

l = sorted(l)
s1  = ''

for i in l:
    s1 = s1 +  i +" "

print(s1)

'''Given a long sentence, reverse each word of the sentence 
individually in the sentence itself

Input : Geeks For Geeks is good to learn
Output : skeeG roF skeeG si doog ot nrael

Input : Split Reverse Join
Output : tilpS esreveR nioJ'''

s = 'Geeks For Geeks is good to learn'

l = s.split()

s1  = ''
new  = []
for i in l:
    new.append(i[::-1])

print(new)
new_sen = " ".join(new)
print(new_sen)

'''Given two strings, print all the common characters in lexicographical order. 

string1 : geeks
string2 : forgeeks

Output : eegks

'''

s1 = 'geeks'
s2 = 'forgeeks'

s  = ''
l1  = []

if len(s1) > len(s2):
    for i in s2:
        if i in s1:           
                s = s + i
                
else:
    for i in s1:
        if i in s2:                
            s = s + i


if s:                 
    print("".join(sorted(s)))

else:
    print("nothing common")

'''Given a string that has set of words and spaces, 
write a program to move all spaces to front of string, by 
raversing the string only once. 

Input  : str = "move these spaces to beginning"
Output : str = "    movethesespacestobeginning" '''

s = "move these spaces to beginning"

no_of_spaces = 0
snew = ""
for i in s:
    if i == " ":
        no_of_spaces = no_of_spaces +  1
    else:
        snew = snew + i
        
out = " " * (no_of_spaces) + snew

print(out)

'''Run length encoded - if the input string is ‘wwwwaaadexxxxxx’, 
then the function should return ‘w4a3d1e1x6’ '''

s = 'wwwwaaadexxxxxx'
snew  = ""

for i in s:
    if i not in snew:
        snew = snew + i + str(s.count(i))
        
print(snew)

'''We are given a string and we need to remove all duplicates from it
Input : geeksforgeeks 
Output : efgkors'''

s =  'geeksforgeeks'
s1 = ""

for i in s:
    if i not in s1:
        s1 = s1 + i
        
print("".join(sorted(s1)))

'''Given a list of strings and a prefix value sub-string, 
find all strings from given list of strings which contains given value as prefix

Input : arr = ['geeksforgeeks', 'forgeeks', 
               'geeks', 'eeksfor'], 
       prefix = 'geek'
Output : ['geeksforgeeks','geeks'] '''

l = ['geeksforgeeks', 'forgeeks', 'geeks', 'eeksfor']

prefix = 'geek'

l1 = []

for i in l:
    if i.startswith(prefix):
        l1.append(i)
        
print(l1)

'''Given a string “str” and another string “sub_str”.
 We are allowed to delete “sub_str” from “str” any number of times. 
 It is also given that the “sub_str” appears only once at a time. 
 The task is to find if “str” can become empty by removing “sub_str” again and again.'''

s = "GEEGEEKSKS"
s1 = "GEEKS"
c = 0

if s1 not in s:
    print("not present")

while len(s)>0:
    if s1 in s:
            s= s.replace(s1, "")
            #print(len(s))
            c = c + 1
           


if s == "":
    print("yes")
    print(c)
    
elif len(s)>0 and s != s1 :
    print("no")
    
'''Given a string of size n, write functions to perform following operations on string.

Left (Or anticlockwise) rotate the given string by d elements (where d <= n).
Right (Or clockwise) rotate the given string by d elements (where d <= n).

Input : s = "GeeksforGeeks"
        d = 2
Output : Left Rotation  : "eksforGeeksGe" 
         Right Rotation : "ksGeeksforGee" '''
         
s = "GeeksforGeeks"

d = 2

left_rotation = s[d:] + s[0:d]
right_rotation = s[-d:] + s[0:-d]

print(left_rotation)

print()

print(right_rotation)

'''Given a 26 letter character set, which is equivalent to character set of English alphabet i.e. (abcd….xyz) and act as a relation. 
We are also given several sentences and we have to translate them with the help of given new character set. '''

old = 'abcdefghijklmnopqrstuvwxyz'
new = 'qwertyuiopasdfghjklzxcvbnm'
s = "egrt"
#Output = 'geek'

for i in s:
    ind = new.index(i)
    print(old[ind], end = "")
    
'''groupby method to remove all consecutive duplicates'''

 import itertools
for (key,group) in itertools.groupby(numbers):
    print (key,list(group))


